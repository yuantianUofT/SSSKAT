hist(S[Y==0])
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 2, m0 = 10, s1 = 3, s0 = 10))
# data preparation
Y = dat$y
X = dat$X
S = dat$s
Z = cbind(1, X)
G = as.matrix(dat$G)
id.t = dat$id.t
ssl_theta(Y = Y, X = X, S = S, Z = Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit, distri = "beta")
id.t
Y = Y; X = X; S = S; Z = Z;
id.t = id.t; weights = NULL; full_eval = TRUE; NULL_nlog_like; nit
distri = "beta"
# initial estimates of the parameters
init_sl = sl_theta(Y, S, X, id.t, weights = NULL, distri)
# prevalence estimate
if (length(id.t) != 0) {
prev_est = mean(Y[id.t])
}
# weights setup
if (is.null(weights)) {
weights = rep(1, length(id.t))
}
# separate labeled_id based on case/control status
id.1 = intersect(which(Y==1), id.t)
id.0 = intersect(which(Y==0), id.t)
# with some labeled data, under the null hypothesis, get supervised estimates
if (length(id.t) == 0) {
alpha=lm(S~X)$coef
} else{
alpha=glm(Y[id.t] ~ X[id.t, ],family=binomial(link = "logit"), weights = weights)$coef
}
(distri == "normal")
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
S[id.1]
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
S[id.1]
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
S[id.1]
distri = "beta"
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 1, m0 = 0, s1 = 1, s0 = 0.5))
G = as.matrix(dat$G)
id.t = dat$id.t
source("~/Documents/GitHub/SS-simulation/simulation scripts/helper_datagen.R", echo=TRUE)
source("~/Documents/GitHub/SS-simulation/simulation scripts/gendata.R", echo=TRUE)
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 1, m0 = 0, s1 = 1, s0 = 0.5))
source("~/Documents/GitHub/SS-simulation/simulation scripts/helper_datagen.R", echo=TRUE)
source("~/Documents/GitHub/SS-simulation/simulation scripts/helper_datagen.R", echo=TRUE)
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 1, m0 = 0, s1 = 1, s0 = 0.5))
# data preparation
Y = dat$y
X = dat$X
S = dat$s
Z = cbind(1, X)
G = as.matrix(dat$G)
id.t = dat$id.t
ssl_theta(Y = Y, X = X, S = S, Z = Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit, "beta")
min(S)
max(S)
Y = Y; X = X; S = S; Z = Z;
id.t = id.t; weights = NULL; full_eval = TRUE; NULL_nlog_like; nit
distri = "beta"
# prevalence estimate
if (length(id.t) != 0) {
prev_est = mean(Y[id.t])
}
# weights setup
if (is.null(weights)) {
weights = rep(1, length(id.t))
}
# separate labeled_id based on case/control status
id.1 = intersect(which(Y==1), id.t)
id.0 = intersect(which(Y==0), id.t)
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
S[id.0]
# prevalence estimate
if (length(id.t) != 0) {
prev_est = mean(Y[id.t])
}
# weights setup
if (is.null(weights)) {
weights = rep(1, length(id.t))
}
# separate labeled_id based on case/control status
id.1 = intersect(which(Y==1), id.t)
id.0 = intersect(which(Y==0), id.t)
# with some labeled data, under the null hypothesis, get supervised estimates
if (length(id.t) == 0) {
alpha=lm(S~X)$coef
} else{
alpha=glm(Y[id.t] ~ X[id.t, ],family=binomial(link = "logit"), weights = weights)$coef
}
# without labeled data, threshold S lower than 20% as labeled controls and greater than 80% as labeled cases
if (distri == "normal") {
if (length(id.t) == 0) {
thre_value1 <- quantile(S, 0.5)
m1= mean(S[which(S>thre_value1)])
s1= sd(S[which(S>thre_value1)])
m0=mean(S[S<thre_value1])
s0=sd(S[S<thre_value1])
} else{
tryCatch({
m1= mean(S[id.1])
s1= sd(S[id.1])
m0=mean(S[id.0])
s0=sd(S[id.0])
}, error = function(e) {
thre_value1 <- quantile(S, 0.5)
m1= mean(S[which(S>thre_value1)])
s1= sd(S[which(S>thre_value1)])
m0=mean(S[S<thre_value1])
s0=sd(S[S<thre_value1])
})
}
} else {
if (length(id.t) == 0) {
id.1 <- which([S>0.5])
# without labeled data, threshold S lower than 20% as labeled controls and greater than 80% as labeled cases
if (distri == "normal") {
if (length(id.t) == 0) {
thre_value1 <- quantile(S, 0.5)
m1= mean(S[which(S>thre_value1)])
s1= sd(S[which(S>thre_value1)])
m0=mean(S[S<thre_value1])
s0=sd(S[S<thre_value1])
} else{
tryCatch({
m1= mean(S[id.1])
s1= sd(S[id.1])
m0=mean(S[id.0])
s0=sd(S[id.0])
}, error = function(e) {
thre_value1 <- quantile(S, 0.5)
m1= mean(S[which(S>thre_value1)])
s1= sd(S[which(S>thre_value1)])
m0=mean(S[S<thre_value1])
s0=sd(S[S<thre_value1])
})
}
} else {
if (length(id.t) == 0) {
id.1 <- which(S>0.5)
id.0 <- which(S<=0.5)
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
} else{
tryCatch({
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
}, error = function(e) {
id.1 <- which(S>0.5)
id.0 <- which(S<=0.5)
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
}
}
f (length(id.t) == 0) {
tryCatch({
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
}, error = function(e) {
id.1 <- which(S>0.5)
id.0 <- which(S<=0.5)
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
})
paras1
paras0
id.1 <- which(S>0.5)
id.0 <- which(S<=0.5)
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
paras0
paras1
# separate labeled_id based on case/control status
id.1 = intersect(which(Y==1), id.t)
id.0 = intersect(which(Y==0), id.t)
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
tryCatch({
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
}, error = function(e) {
id.1 <- which(S>0.5)
id.0 <- which(S<=0.5)
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
})
rm(paras1)
rm(paras0)
tryCatch({
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
}, error = function(e) {
id.1 <- which(S>0.5)
id.0 <- which(S<=0.5)
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
})
paras1
paras0
result <- tryCatch({
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
list(paras1 = paras1, paras0 = paras0)  # Return results as a list
}, error = function(e) {
# Optionally re-define indices if needed based on the context or error
id.1 <- which(S > 0.5)
id.0 <- which(S <= 0.5)
# Recompute inside the error handler and return new results
paras1 <- EnvStats::ebeta(S[id.1], method = "mle")
paras0 <- EnvStats::ebeta(S[id.0], method = "mle")
list(paras1 = paras1, paras0 = paras0)  # Return results as a list
})
paras1 <- result$paras1
paras0 <- result$paras0
paras1
paras0
m1 <- paras1$parameters[1]
s1 <- paras1$parameters[2]
m0 <- paras0$parameters[1]
s0 <- paras0$parameters[2]
m1
m0
s1
s0
if (length(id.t) == 0) {
thre_value1 <- quantile(S, 0.5)
m1= mean(S[which(S>thre_value1)])
s1= sd(S[which(S>thre_value1)])
m0=mean(S[S<thre_value1])
s0=sd(S[S<thre_value1])
} else{
result <- tryCatch({
m1= mean(S[id.1])
s1= sd(S[id.1])
m0=mean(S[id.0])
s0=sd(S[id.0])
list(m1 = m1, s1 = s1, m0 = m0, m1 = m1)
}, error = function(e) {
thre_value1 <- quantile(S, 0.5)
m1= mean(S[which(S>thre_value1)])
s1= sd(S[which(S>thre_value1)])
m0=mean(S[S<thre_value1])
s0=sd(S[S<thre_value1])
list(m1 = m1, s1 = s1, m0 = m0, m1 = m1)
})
m1 <- result$m1
s1 <- result$s1
m0 <- result$m0
s0 <- result$s0
}
m1
s1
m0
s0
source("~/Documents/GitHub/SSSKAT/R/helper.R", echo=TRUE)
# initial estimates of the parameters
init_sl = sl_theta(Y, S, X, id.t, weights = NULL, distri)
init_sl
optim(par=init_sl, fn=NULL_nlog_like, Y = Y, X = X, S = S, Z = Z, id.t=id.t, distri=distri,
method="BFGS")
optim(par=init_sl, fn=NULL_nlog_like, Y = Y, X = X, S = S, Z = Z, id.t=id.t, distri=distri,
method="Nelder-Mead")
theta = init_sl
alpha <- theta[1:(ncol(X)+1)]
smalle <- as.numeric(Rmpfr::mpfr(1e-35, precBits=128))
# predicted values under the null
pred <- g.logit(Z %*% alpha)
pred <- as.vector(pred)
(distri == "normal")
# parameters setup
m1 <- exp(theta[(ncol(X)+2)])
m0 <- exp(theta[(ncol(X)+3)])
s1 <- exp(theta[(ncol(X)+4)])
s0 <- exp(theta[(ncol(X)+5)])
m1
m0
s1
s0
# correct 0s in pred
pred_values <- pred[id.t]
index0 <- which(pred_values == 0)
if (length(index0) > 0) {
pred_values[which(pred_values == 0)] <- smalle
}
pred_values <- unlist(pred_values)
# correct 0s in 1-pred
pred_values1 <- 1-pred[id.t]
index0 <- which(pred_values1 == 0)
if (length(index0) > 0) {
pred_values1[which(pred_values1 == 0)] <- smalle
}
pred_values1 <- unlist(pred_values1)
# log likelihood calculate
l_ob_y11 <- Y[id.t] * log(pred_values)
l_ob_y12 <- Y[id.t] * dbeta(S[id.t], shape1=m1, shape2=s1, log = T)
l_ob_y21 <- (1-Y[id.t]) * log(pred_values1)
l_ob_y22 <- (1-Y[id.t]) * dbeta(S[id.t], shape1=m0, shape2=s0, log = T)
l_ob <- sum(l_ob_y11 + l_ob_y12 + l_ob_y21 + l_ob_y22)
l_ob
Y[id.t] * log(pred_values)
Y[id.t] * dbeta(S[id.t], shape1=m1, shape2=s1, log = T)
Y[id.t]
dbeta(S[id.t], shape1=m1, shape2=s1, log = T)
id.t
S[97628]
S[S == 0] <- 1e-10
max(S)
min(S)
# initial estimates of the parameters
init_sl = sl_theta(Y, S, X, id.t, weights = NULL, distri)
optim(par=init_sl, fn=NULL_nlog_like, Y = Y, X = X, S = S, Z = Z, id.t=id.t, distri=distri,
method="Nelder-Mead")
exp(0.258823636821784663908375)
exp(-3.018561004539866310381058 )
exp(-0.109664978841614857429931)
exp(1.071778760169227462384356)
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 1, m0 = 0, s1 = 1, s0 = 0.5))
distri
# data preparation
Y = dat$y
X = dat$X
S = dat$s
Z = cbind(1, X)
G = as.matrix(dat$G)
id.t = dat$id.t
S[S == 0] <- 1e-21
min(S)
ssl_theta(Y = Y, X = X, S = S, Z = Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit, distri = distri)
Y = Y; X = X; S = S; Z = Z;
id.t = id.t; weights = NULL; full_eval = TRUE; NULL_nlog_like; nit; distri = distri
# initial estimates of the parameters
init_sl = sl_theta(Y, S, X, id.t, weights = NULL, distri)
init_sl
exp(init_sl)
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 5, m0 = 1, s1 = 5, s0 = 1))
# data preparation
Y = dat$y
X = dat$X
S = dat$s
Z = cbind(1, X)
G = as.matrix(dat$G)
id.t = dat$id.t
cor(Y, S)
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 20, m0 = 1, s1 = 1, s0 = 1))
# data preparation
Y = dat$y
X = dat$X
S = dat$s
Z = cbind(1, X)
G = as.matrix(dat$G)
id.t = dat$id.t
cor(Y, S)
Y = Y; X = X; S = S; Z = Z;
id.t = id.t; weights = NULL; full_eval = TRUE; NULL_nlog_like; nit; distri = distri
# initial estimates of the parameters
init_sl = sl_theta(Y, S, X, id.t, weights = NULL, distri)
exp(init_sl)
min(S)
optim(par=init_sl, fn=NULL_nlog_like, Y = Y, X = X, S = S, Z = Z, id.t=id.t, distri=distri,
method="Nelder-Mead")
exp(2.93124375130432879288378)
exp(0.04568004037883546808452)
exp(-0.01480874712663973052917)
exp(0.10034830233312835856552)
ntotal = 150000
nlabel_value = 2000
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 20, m0 = 1, s1 = 1, s0 = 1))
min(S)
# data preparation
Y = dat$y
X = dat$X
S = dat$s
Z = cbind(1, X)
G = as.matrix(dat$G)
id.t = dat$id.t
min(S)
ssl_theta(Y = Y, X = X, S = S, Z = Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit, distri = distri)
distri = "normal"
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 1, m0 = 0, s1 = 1, s0 = 0.5))
# data preparation
Y = dat$y
X = dat$X
S = dat$s
Z = cbind(1, X)
G = as.matrix(dat$G)
id.t = dat$id.t
# Parameter estimation under the null
para_est <- SSSKAT::ssl_theta(Y = Y, X = X, S = S, Z = Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit, distri)
para_est
para_est$final_est
exp(para_est$final_est)
distri
source("~/Documents/GitHub/SS-SKAT-Analysis/Ablation analysis script/helper.R", echo=TRUE)
ssl_theta(Y = Y, X = X, S = S, Z = Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit)
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 1, m0 = 0, s1 = 1, s0 = 0.5))
# data preparation
Y = dat$y
X = dat$X
S = dat$s
Z = cbind(1, X)
G = as.matrix(dat$G)
id.t = dat$id.t
ssl_theta(Y = Y, X = X, S = S, Z = Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit)
source("~/Documents/GitHub/SS-SKAT-Analysis/Ablation analysis script/helper.R", echo=TRUE)
ssl_theta
NULL_nlog_like
NULL_log_like
ssl_theta(Y = Y, X = X, S = S, Z = Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit)
source("~/Documents/GitHub/SSSKAT/R/helper.R", echo=TRUE)
source("~/Documents/GitHub/SS-simulation/simulation scripts/gendata.R", echo=TRUE)
source("~/Documents/GitHub/SS-simulation/simulation scripts/helper_datagen.R", echo=TRUE)
source("~/Documents/GitHub/SSSKAT/R/helper.R", echo=TRUE)
maf = 1
ntotal = 150000
nlabel_value = 2000
prev_value = 0.2
nsnps = 1
distri = "normal"
type_value = "T1E"
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 1, m0 = 0, s1 = 1, s0 = 0.5))
nsnps
maf = 0.1
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 1, m0 = 0, s1 = 1, s0 = 0.5))
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 1, m0 = 0, s1 = 1, s0 = 0.5))
maf = c(0.1, 0.2)
nsnps = 2
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 1, m0 = 0, s1 = 1, s0 = 0.5))
ntotal = 150000
nlabel_value = 2000
prev_value = 0.2
nsnps = 2
distri = "normal"
type_value = "T1E"
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 1, m0 = 0, s1 = 1, s0 = 0.5))
source("~/Documents/GitHub/SS-simulation/simulation scripts/gendata.R", echo=TRUE)
dat <- gendata(nn = ntotal, prev = prev_value, pve_age = 0.1, pve_pcs = 0.2, pve_sex = 0.03, prop_causal = 0.25, snps = nsnps,
label.size=nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = diag(rep(1, 5)),
maf0 = maf[1:20], maf1 = maf[1:20],
S_type = distri, S_para = c(m1 = 1, m0 = 0, s1 = 1, s0 = 0.5))
