create_package()
library(devtools)
#> Loading required package: usethis
create_package()
full_data <- readRDS("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/example_data1.rds")
example_data <- readRDS("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/example_data1.rds")
usethis::use_data(example_data)
library(roxygen2)
roxygenise()
?threshold_SKAT
library(SSSKAT)
library(SSSKAT)
roxygenise()
library(roxygen2); # Read in the roxygen2 R package
roxygenise();
library(SSSKAT)
library(SSSKAT)
roxygenise()
roxygenise()
library(SSSKAT)
load(example_data)
load('example_data')
data("example_data")
example_data$id.t
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 5000)
analysis_data <- example_data$my_dat
labeled_data_id <- example_data$id.t
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 50)
library(SSSKAT)
data("example_data")
analysis_data <- example_data$my_dat
labeled_data_id <- example_data$id.t
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 50)
select(analysis_data, starts_with('X'))
library(dplyr)
select(analysis_data, starts_with('X'))
library(SSSKAT)
data("example_data")
analysis_data <- example_data$my_dat
labeled_data_id <- example_data$id.t
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 50)
library(MASS)
library(dplyr)
library(SKAT)
library(mvtnorm)
library(matrixStats)
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 50)
?select
library(SSSKAT)
data("example_data")
analysis_data <- example_data$my_dat
labeled_data_id <- example_data$id.t
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 50)
labeled_data_id
mean(analysis_data$Y[labeled_data_id])
library(MASS)
library(dplyr)
library(SKAT)
library(mvtnorm)
library(matrixStats)
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 50)
dat = analysis_data
id.t = labeled_data_id
weights = NULL
full_NR_evaluation = TRUE
NULL_nlog_like
prev_est = mean(analysis_data$Y[labeled_data_id]
nboot = 5000
prev_est = mean(analysis_data$Y[labeled_data_id])
nboot = 5000
# parameter estimates
theta_est <- ssl_theta(dat=dat, id.t=id.t, weights = weights, full_eval = full_NR_evaluation, nit = nit,
NULL_nlog_like, prev_est = prev_est)$final_est
# bootstrap
boot_scores <- sapply(1:nboot, function(x) boot_Q(dat = dat, id.t = id.t, theta = theta_est, x))
nboot = 5
# parameter estimates
theta_est <- ssl_theta(dat=dat, id.t=id.t, weights = weights, full_eval = full_NR_evaluation, nit = nit,
NULL_nlog_like, prev_est = prev_est)$final_est
# bootstrap
boot_scores <- sapply(1:nboot, function(x) boot_Q(dat = dat, id.t = id.t, theta = theta_est, x))
# SS SKAT score
scoreQ <- score_fun(dat=dat, id.t=id.t, theta=theta_est, beta=NULL)$Q
# SS SKAT score
scoreQ <- score_fun(dat=dat, id.t=id.t, theta=theta_est)$Q
# pvalue estimate
pvalue <- length(which(boot_scores > scoreQ))/length(boot_scores)
results <- list(theta_est = theta_est, scoreQ = scoreQ, pvalue = pvalue)
results
library(SSSKAT)
data("example_data")
analysis_data <- example_data$my_dat
labeled_data_id <- example_data$id.t
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 5000)
data("example_data")
library(SSSKAT)
analysis_data <- example_data$my_dat
labeled_data_id <- example_data$id.t
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 5000)
# parameter estimates
theta_est <- ssl_theta(dat=dat, id.t=id.t, weights = weights, full_eval = full_NR_evaluation, nit = nit,
NULL_nlog_like, prev_est = prev_est)$final_est
theta_est <- ssl_theta(dat=dat, id.t=id.t, weights = weights, full_eval = full_NR_evaluation, nit = nit,
NULL_nlog_like, prev_est = prev_est)
ssl_theta(dat=dat, id.t=id.t, weights = weights, full_eval = full_NR_evaluation, nit = nit,
NULL_nlog_like, prev_est = prev_est)
library(SSSKAT)
data("example_data")
analysis_data <- example_data$my_dat
labeled_data_id <- example_data$id.t
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 50)
ssl_theta(dat=dat, id.t=id.t, weights = weights, full_eval = full_NR_evaluation, nit = nit,
NULL_nlog_like, prev_est = prev_est)
dat
# data preparation
Y = dat$Y
X <- dplyr::select(dat, starts_with('X'))
# initial estimates of the parameters
init_sl = sl_theta(dat, id.t, weights, prev_est)
# final estimates maximizing likelihood
if (full_eval){
optim_temp <- tryCatch(optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="BFGS"), error=function(e) NA)
if (length(optim_temp) == 0) {
warning("Switched from BFGS to SANN in optim")
optim_temp <- tryCatch(optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="SANN"), error=function(e) NA)
}
final_est <- optim_temp$par
converge_steps <- optim_temp$counts[2]
} else {
optim_temp <- tryCatch(optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="BFGS", control = list(maxit=nit)), error=function(e) NA)
final_est <- optim_temp$par
converge_steps <- optim_temp$counts[2]
}
final_est
full_eval
optim_temp <- tryCatch(optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="BFGS"), error=function(e) NA)
optim_temp
(length(optim_temp) == 0)
# final estimates maximizing likelihood
if (full_eval){
optim_temp <- tryCatch(optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="BFGS"), error=function(e) NA)
if (length(optim_temp) == 1) {
warning("Switched from BFGS to SANN in optim")
optim_temp <- tryCatch(optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="SANN"), error=function(e) NA)
}
final_est <- optim_temp$par
converge_steps <- optim_temp$counts[2]
} else {
optim_temp <- tryCatch(optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="BFGS", control = list(maxit=nit)), error=function(e) NA)
final_est <- optim_temp$par
converge_steps <- optim_temp$counts[2]
}
final_est
optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="BFGS")
init_sl
NULL_nlog_like
NULL_nlog_like
ssl_theta <- function(dat, id.t, weights = NULL,
full_eval = TRUE, NULL_nlog_like,
nit, prev_est) {
# data preparation
Y = dat$Y
X <- dplyr::select(dat, starts_with('X'))
# initial estimates of the parameters
init_sl = sl_theta(dat, id.t, weights, prev_est)
# final estimates maximizing likelihood
if (full_eval){
optim_temp <- tryCatch(optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="BFGS"), error=function(e) NA)
if (length(optim_temp) == 1) {
warning("Switched from BFGS to SANN in optim")
optim_temp <- tryCatch(optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="SANN"), error=function(e) NA)
}
final_est <- optim_temp$par
converge_steps <- optim_temp$counts[2]
} else {
optim_temp <- tryCatch(optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="BFGS", control = list(maxit=nit)), error=function(e) NA)
final_est <- optim_temp$par
converge_steps <- optim_temp$counts[2]
}
# final parameter estimates
return(list(final_est = final_est, converge_steps = converge_steps, l_value = optim_temp$value))
}
source("~/Desktop/UoT/SSSKAT/R/helper.R", echo=TRUE)
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 50)
source("~/Desktop/UoT/SSSKAT/R/helper.R", echo=TRUE)
data("example_data")
analysis_data <- example_data$my_dat;
labeled_data_id <- example_data$id.t;
dat = analysis_data
id.t = labeled_data_id
weights = NULL
full_NR_evaluation = TRUE
NULL_nlog_like
NULL_nlog_like
prev_est = mean(analysis_data$Y[labeled_data_id])
nboot = 5000
# parameter estimates
theta_est <- ssl_theta(dat=dat, id.t=id.t, weights = weights, full_eval = full_NR_evaluation, nit = nit,
NULL_nlog_like, prev_est = prev_est)$final_est
library(SSSKAT)
data("example_data")
analysis_data <- example_data$my_dat
labeled_data_id <- example_data$id.t
devtools::load_all(".")
library(SSSKAT)
library(roxygen2); # Read in the roxygen2 R package
roxygenise()
library(SSSKAT)
data("example_data")
analysis_data <- example_data$my_dat
labeled_data_id <- example_data$id.t
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 5000)
dat
id.t
full_eval
NULL_nlog_like
# data preparation
Y = dat$Y
X <- dplyr::select(dat, starts_with('X'))
# initial estimates of the parameters
init_sl = sl_theta(dat, id.t, weights, prev_est)
init_sl
NULL_nlog_like
# parameter estimates
theta_est <- ssl_theta(dat=dat, id.t=id.t, weights = weights, full_eval = full_NR_evaluation, nit = nit,
NULL_nlog_like = NULL_nlog_like, prev_est = prev_est)$final_est
source("~/Desktop/UoT/SSSKAT/R/helper.R", echo=TRUE)
data("example_data")
analysis_data <- example_data$my_dat
labeled_data_id <- example_data$id.t
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 5000)
# parameter estimates
theta_est <- ssl_theta(dat=dat, id.t=id.t, weights = weights, full_eval = full_NR_evaluation, nit = nit,
NULL_nlog_like = NULL_nlog_like, prev_est = prev_est)$final_est
dat
id.t
weights
full_eval
NULL_nlog_like
source("~/Desktop/UoT/SSSKAT/R/helper.R", echo=TRUE)
SS_SKAT <- function(dat, id.t, weights = NULL,
full_NR_evaluation = TRUE, nit = NULL,
NULL_nlog_like, prev_est,
nboot) {
# parameter estimates
theta_est <- ssl_theta(dat=dat, id.t=id.t, weights = weights, full_eval = full_NR_evaluation, nit = nit,
NULL_nlog_like = NULL_nlog_like, prev_est = prev_est)$final_est
# bootstrap
boot_scores <- sapply(1:nboot, function(x) boot_Q(dat = dat, id.t = id.t, theta = theta_est, x))
# SS SKAT score
scoreQ <- score_fun(dat=dat, id.t=id.t, theta=theta_est)$Q
# pvalue estimate
pvalue <- length(which(boot_scores > scoreQ))/length(boot_scores)
results <- list(theta_est = theta_est, scoreQ = scoreQ, pvalue = pvalue)
return(results)
}
data("example_data")
analysis_data <- example_data$my_dat
labeled_data_id <- example_data$id.t
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 5000)
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 5000)
# data preparation
Y = dat$Y
X <- dplyr::select(dat, starts_with('X'))
# initial estimates of the parameters
init_sl = sl_theta(dat, id.t, weights, prev_est)
init_sl
optim_temp <- tryCatch(optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="BFGS"), error=function(e) NA)
optim_temp
sl_theta
# data preparation
Y = dat$Y
X <- dplyr::select(dat, starts_with('X'))
X
# initial estimates of the parameters
init_sl = sl_theta(dat, id.t, weights, prev_est)
prev_est
init_sl
full_eval
optim_temp <- tryCatch(optim(par=init_sl, fn=NULL_nlog_like, dat=dat, id.t=id.t,
method="BFGS"), error=function(e) NA)
optim_temp
source("~/Desktop/UoT/SSSKAT/R/helper.R", echo=TRUE)
ssl_theta
data(example_data)
analysis_data <- example_data$my_dat;
labeled_data_id <- example_data$id.t;
dat = analysis_data
id.t = labeled_data_id
weights = NULL
full_NR_evaluation = TRUE
NULL_nlog_like
NULL_nlog_like = NULL_nlog_like
NULL_nlog_like
prev_est = mean(analysis_data$Y[labeled_data_id])
nboot = 50
# parameter estimates
theta_est <- ssl_theta(dat=dat, id.t=id.t, weights = weights, full_eval = full_NR_evaluation, nit = nit,
NULL_nlog_like = NULL_nlog_like, prev_est = prev_est)$final_est
# bootstrap
boot_scores <- sapply(1:nboot, function(x) boot_Q(dat = dat, id.t = id.t, theta = theta_est, x))
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like = NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 500);
SS_SKAT <- function(dat, id.t, weights = NULL,
full_NR_evaluation = TRUE, nit = NULL,
NULL_nlog_like, prev_est,
nboot) {
# parameter estimates
theta_est <- ssl_theta(dat=dat, id.t=id.t, weights = weights, full_eval = full_NR_evaluation, nit = nit,
NULL_nlog_like = NULL_nlog_like, prev_est = prev_est)$final_est
# bootstrap
boot_scores <- sapply(1:nboot, function(x) boot_Q(dat = dat, id.t = id.t, theta = theta_est, x))
# SS SKAT score
scoreQ <- score_fun(dat=dat, id.t=id.t, theta=theta_est)$Q
# pvalue estimate
pvalue <- length(which(boot_scores > scoreQ))/length(boot_scores)
results <- list(theta_est = theta_est, scoreQ = scoreQ, pvalue = pvalue)
return(results)
}
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like = NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 500);
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
library(SSSKAT)
data("example_data")
analysis_data <- example_data$my_dat
labeled_data_id <- example_data$id.t
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like = NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 50)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(SSSKAT)
data("example_data")
analysis_data <- example_data$my_dat;
labeled_data_id <- example_data$id.t;
SS_SKAT_results <- SS_SKAT(dat = analysis_data, id.t = labeled_data_id, weights = NULL, full_NR_evaluation = TRUE, NULL_nlog_like = NULL_nlog_like, prev_est = mean(analysis_data$Y[labeled_data_id]), nboot = 50);
