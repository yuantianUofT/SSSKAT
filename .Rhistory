###########################################################
#    Run STAARpipeline
###########################################################
rm(list=ls())
gc()
### load required package
# 1) uncomment the following if any packages used below is not installed
# library(devtools)
# install.packages("BiocManager")
# BiocManager::install("gdsfmt")
# BiocManager::install("SeqArray")
# BiocManager::install("SeqVarTools")
# BiocManager::install("GENESIS")
# install_github("xihaoli/STAAR")
# install_github("xihaoli/MultiSTAAR")
# install_github("zilinli1988/SCANG")
# BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
# install_github("xihaoli/STAARpipeline")
# install_github("xihaoli/STAARpipelineSummary")
# install.packages("psych")
# install.packages("expm")
# install.packages("doParallel")
# install.packages("caret")
# 2) load libraries
library(gdsfmt)
library(SeqArray)
library(SeqVarTools)
library(STAAR)
library(STAARpipeline)
library(STAARpipelineSummary)
library(dplyr)
library(psych)
library(expm)
library(foreach)
library(doParallel)
library(SKAT)
library(ACAT)
library(SSSKAT)
# set up parallel computing
ncores = detectCores() #Sys.getenv("SLURM_CPUS_PER_TASK")
registerDoParallel(cores=ncores)# Shows the number of Parallel Workers to be used
print(ncores) # this how many cores are available, and how many you have requested.
getDoParWorkers()#
set.seed(1)
GWAS_data <- readRDS("Ablation analysis example data/GWAS_data_with_S.rds") # TODO: change to the correct input path
GWAS_data <- as.data.frame(GWAS_data)
### load source functions
# TODO: change the following to the correct path
setwd('~/Documents/GitHub/SS-SKAT-Analysis')
set.seed(1)
GWAS_data <- readRDS("Ablation analysis example data/GWAS_data_with_S.rds") # TODO: change to the correct input path
GWAS_data <- as.data.frame(GWAS_data)
gds.path <- "/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds" # TODO: change to the correct input path
# (File above available for download at: https://drive.google.com/drive/folders/19rSIkYrQz-2FKX0yJA5BSzLPD9ixKgq_?usp=share_link)
genofile <- seqOpen(gds.path)
Annotation_dir <- "annotation/info/FunctionalAnnotation"
Annotation_name_catalog <- get(load("Ablation analysis example data/Annotation_name_catalog.Rdata")) # TODO: change to the correct input path
total_n <- nrow(GWAS_data)
ablation_n <- ceiling(c(0.02, 0.05, 0.1, 0.15, 0.2) * total_n)
ablation_results <- c()
num_samps = 50
set.seed(1)
# Create obj_SS
id.t <- sample(1:total_n, num_samps, replace = FALSE)
covar <- GWAS_data %>% dplyr::select(starts_with("X")) %>% as.matrix()
obj_SS <- list(patient.id=GWAS_data$patient.id, id.t=id.t, y=GWAS_data$Y, s=GWAS_data$S, covar=covar, Z = cbind(1, covar))
# Parameter estimation under the null
theta_est <- ssl_theta(Y = obj_SS$y, X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit) # estimated theta based on Y, X, S, Z, id.t, weights, full_eval, NULL_nlog_like, nit
ssl_theta
# Parameter estimation under the null
theta_est <- ssl_theta(Y = obj_SS$y, X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit) # estimated theta based on Y, X, S, Z, id.t, weights, full_eval, NULL_nlog_like, nit
set.seed(1)
# Create obj_SS
id.t <- sample(1:total_n, num_samps, replace = FALSE)
covar <- GWAS_data %>% dplyr::select(starts_with("X")) %>% as.matrix()
obj_SS <- list(patient.id=GWAS_data$patient.id, id.t=id.t, y=GWAS_data$Y, s=GWAS_data$S, covar=covar, Z = cbind(1, covar))
# Parameter estimation under the null
theta_est <- ssl_theta(Y = obj_SS$y, X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit) # estimated theta based on Y, X, S, Z, id.t, weights, full_eval, NULL_nlog_like, nit
Y = obj_SS$y
obj_SS$covar
obj_SS$s
obj_SS$Z
id.t = id.t
ssl_theta(Y = obj_SS$y, X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit)
remove.packages("SSSKAT")
source("Ablation analysis script/helper.R")
# Parameter estimation under the null
theta_est <- ssl_theta(Y = obj_SS$y, X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit) # estimated theta based on Y, X, S, Z, id.t, weights, full_eval, NULL_nlog_like, nit
setwd("/Users/tianyuan/Documents/GitHub/SSSKAT")
roxygen2::roxygenise()
setwd("/Users/tianyuan/Documents/GitHub/SSSKAT")
roxygen2::roxygenise()
