dat_null <- cbind(y, covar, s)
colnames(dat_null) <- c("Y", paste0("X", 1:ncol(covar)), "S")
theta_est <- ssl_theta(dat = dat_null, id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit)
obj_SS$theta_est <- theta_est$final_est
gds.path <- "/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds"
genofile <- seqOpen(gds.path)
Annotation_dir <- "annotation/info/FunctionalAnnotation"
Annotation_name_catalog <- get(load("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/Annotation_name_catalog.Rdata"))
plof_result <- plof_SS(chr = 1, gene_name = "BRCA1", genofile = genofile, obj_SS, genes,
QC_label="annotation/info/QC_label", variant_type="SNV", geno_missing_imputation="mean",
Annotation_dir="annotation/info/FunctionalAnnotation", Annotation_name_catalog,
Use_annotation_weights=F, Annotation_name=NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 2, mac.thresh = 10,
boot = T, nboot = 10)
plof_result
# supervised likelihood
logl_null=expression(y*log((1 / (1 + exp(-(a1))))) + (1-y)*log(1-(1 / (1 + exp(-(a1))))))
# first derivative
logl_null_a1 <- D(logl_null,'a1')
logl_null_a1
###########################################################
#    Run STAARpipeline
###########################################################
rm(list=ls())
gc()
### load required package
# 1) uncomment the following if any packages used below is not installed
# library(devtools)
# install.packages("BiocManager")
# BiocManager::install("gdsfmt")
# BiocManager::install("SeqArray")
# BiocManager::install("SeqVarTools")
# BiocManager::install("GENESIS")
# install_github("xihaoli/STAAR")
# install_github("xihaoli/MultiSTAAR")
# install_github("zilinli1988/SCANG")
# BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
# install_github("xihaoli/STAARpipeline")
# install_github("xihaoli/STAARpipelineSummary")
# install.packages("psych")
# install.packages("expm")
# install.packages("doParallel")
# install.packages("caret")
# 2) load libraries
library(gdsfmt)
library(SeqArray)
library(SeqVarTools)
library(STAAR)
library(STAARpipeline)
library(STAARpipelineSummary)
library(dplyr)
library(psych)
library(expm)
library(foreach)
library(doParallel)
library(SKAT)
library(ACAT)
library(SSSKAT)
# set up parallel computing
ncores = detectCores() #Sys.getenv("SLURM_CPUS_PER_TASK")
registerDoParallel(cores=ncores)# Shows the number of Parallel Workers to be used
print(ncores) # this how many cores are available, and how many you have requested.
getDoParWorkers()#
### load source functions
# TODO: change the following to the correct path
setwd('~/Documents/GitHub/SS-SKAT-Analysis')
# source("Ablation analysis script/STAAR_SS.R")
# source("Ablation analysis script/SS_test.R")
# source("Ablation analysis script/plof_SS.R")
# source("Ablation analysis script/helper.R")
# source("Ablation analysis script/threshold_test.R")
# source("Ablation analysis script/labeled_test.R")
# source("Ablation analysis script/naive_S_test.R")
# source("Ablation analysis script/threshold.R")
# source("Ablation analysis script/para_func.R")
set.seed(1)
GWAS_data <- readRDS("Ablation analysis example data/GWAS_data_with_S.rds") # TODO: change to the correct input path
GWAS_data <- as.data.frame(GWAS_data)
gds.path <- "/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds" # TODO: change to the correct input path
# (File above available for download at: https://drive.google.com/drive/folders/19rSIkYrQz-2FKX0yJA5BSzLPD9ixKgq_?usp=share_link)
genofile <- seqOpen(gds.path)
set.seed(1)
GWAS_data <- readRDS("Ablation analysis example data/GWAS_data_with_S.rds") # TODO: change to the correct input path
GWAS_data <- as.data.frame(GWAS_data)
gds.path <- "Ablation analysis example data/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds" # TODO: change to the correct input path
# (File above available for download at: https://drive.google.com/drive/folders/19rSIkYrQz-2FKX0yJA5BSzLPD9ixKgq_?usp=share_link)
genofile <- seqOpen(gds.path)
Annotation_dir <- "annotation/info/FunctionalAnnotation"
Annotation_name_catalog <- get(load("Ablation analysis example data/Annotation_name_catalog.Rdata")) # TODO: change to the correct input path
total_n <- nrow(GWAS_data)
ablation_n <- ceiling(c(0.02, 0.05, 0.1, 0.15, 0.2) * total_n)
ablation_results <- c()
num_samps = 200
set.seed(1)
# Create obj_SS
id.t <- sample(1:total_n, num_samps, replace = FALSE)
covar <- GWAS_data %>% dplyr::select(starts_with("X")) %>% as.matrix()
obj_SS <- list(patient.id=GWAS_data$patient.id, id.t=id.t, y=GWAS_data$Y, s=GWAS_data$S, covar=covar, Z = cbind(1, covar))
# Parameter estimation under the null
theta_est <- ssl_theta(Y = obj_SS$y, X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit) # estimated theta based on Y, X, S, Z, id.t, weights, full_eval, NULL_nlog_like, nit
# Parameter estimation under the null
theta_est <- SSSKAT::ssl_theta(Y = obj_SS$y, X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit) # estimated theta based on Y, X, S, Z, id.t, weights, full_eval, NULL_nlog_like, nit
setwd("/Users/tianyuan/Documents/GitHub/SSSKAT/R")
roxygen2::roxygenise()
setwd("/Users/tianyuan/Documents/GitHub/SSSKAT")
roxygen2::roxygenise()
remove.packages("SSSKAT")
devtools::install_github("yuantianUofT/SSSKAT")
rm(list=ls())
gc()
### load required package
# 1) uncomment the following if any packages used below is not installed
# library(devtools)
# install.packages("BiocManager")
# BiocManager::install("gdsfmt")
# BiocManager::install("SeqArray")
# BiocManager::install("SeqVarTools")
# BiocManager::install("GENESIS")
# install_github("xihaoli/STAAR")
# install_github("xihaoli/MultiSTAAR")
# install_github("zilinli1988/SCANG")
# BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
# install_github("xihaoli/STAARpipeline")
# install_github("xihaoli/STAARpipelineSummary")
# install.packages("psych")
# install.packages("expm")
# install.packages("doParallel")
# install.packages("caret")
# 2) load libraries
library(gdsfmt)
library(SeqArray)
library(SeqVarTools)
library(STAAR)
library(STAARpipeline)
library(STAARpipelineSummary)
library(dplyr)
library(psych)
library(expm)
library(foreach)
library(doParallel)
library(SKAT)
library(ACAT)
library(SSSKAT)
### load source functions
# TODO: change the following to the correct path
setwd('~/Documents/GitHub/SS-SKAT-Analysis')
set.seed(1)
GWAS_data <- readRDS("Ablation analysis example data/GWAS_data_with_S.rds") # TODO: change to the correct input path
GWAS_data <- as.data.frame(GWAS_data)
gds.path <- "Ablation analysis example data/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds" # TODO: change to the correct input path
# (File above available for download at: https://drive.google.com/drive/folders/19rSIkYrQz-2FKX0yJA5BSzLPD9ixKgq_?usp=share_link)
genofile <- seqOpen(gds.path)
gds.path <- "/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds" # TODO: change to the correct input path
# (File above available for download at: https://drive.google.com/drive/folders/19rSIkYrQz-2FKX0yJA5BSzLPD9ixKgq_?usp=share_link)
genofile <- seqOpen(gds.path)
Annotation_dir <- "annotation/info/FunctionalAnnotation"
Annotation_name_catalog <- get(load("Ablation analysis example data/Annotation_name_catalog.Rdata")) # TODO: change to the correct input path
total_n <- nrow(GWAS_data)
ablation_n <- ceiling(c(0.02, 0.05, 0.1, 0.15, 0.2) * total_n)
ablation_results <- c()
num_samps = 200
set.seed(1)
# Create obj_SS
id.t <- sample(1:total_n, num_samps, replace = FALSE)
covar <- GWAS_data %>% dplyr::select(starts_with("X")) %>% as.matrix()
obj_SS <- list(patient.id=GWAS_data$patient.id, id.t=id.t, y=GWAS_data$Y, s=GWAS_data$S, covar=covar, Z = cbind(1, covar))
# Parameter estimation under the null
theta_est <- ssl_theta(Y = obj_SS$y, X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit) # estimated theta based on Y, X, S, Z, id.t, weights, full_eval, NULL_nlog_like, nit
obj_SS$theta_est <- theta_est$final_est # assigned estimated theta values to all patients
# variance preparation, in real data this part only need to be done once for all genes as long as all elements in obj_SS remain the same
nboot = 5 # change to 500 in real data
para_results <- foreach(i = 1:nboot, .combine = cbind) %dopar% {
simseed <- i
set.seed(simseed)
para_func(nn = total_n, theta = obj_SS$theta_est, Y = obj_SS$y,
X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z, id.t = obj_SS$id.t)
}
# Run plof_SS
plof_result <- plof_SS(chr = 1, gene_name = "BRCA1", genofile = genofile, obj_SS, genes,
QC_label="annotation/info/QC_label", variant_type="SNV", geno_missing_imputation="mean",
Annotation_dir="annotation/info/FunctionalAnnotation", Annotation_name_catalog,
Use_annotation_weights=F, Annotation_name=NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 2, mac.thresh = 10,
boot = T, para_results = para_results)
plof_result
###########################################################
#    Run STAARpipeline
###########################################################
rm(list=ls())
gc()
library(gdsfmt)
library(SeqArray)
library(SeqVarTools)
library(STAAR)
library(STAARpipeline)
library(STAARpipelineSummary)
library(dplyr)
library(psych)
library(expm)
library(foreach)
library(doParallel)
library(SKAT)
library(ACAT)
remove.packages("SSSKAT")
setwd('~/Documents/GitHub/SS-SKAT-Analysis')
source("Ablation analysis script/STAAR_SS.R")
source("Ablation analysis script/SS_test.R")
source("Ablation analysis script/plof_SS.R")
source("Ablation analysis script/helper.R")
source("Ablation analysis script/threshold_test.R")
source("Ablation analysis script/labeled_test.R")
source("Ablation analysis script/naive_S_test.R")
source("Ablation analysis script/threshold.R")
source("Ablation analysis script/para_func.R")
set.seed(1)
GWAS_data <- readRDS("Ablation analysis example data/GWAS_data_with_S.rds") # TODO: change to the correct input path
gds.path <- "/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds" # TODO: change to the correct input path
gds.path <- "Ablation analysis example data/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds" # TODO: change to the correct input path
# (File above available for download at: https://drive.google.com/drive/folders/19rSIkYrQz-2FKX0yJA5BSzLPD9ixKgq_?usp=share_link)
genofile <- seqOpen(gds.path)
gds.path <- "/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds" # TODO: change to the correct input path
# (File above available for download at: https://drive.google.com/drive/folders/19rSIkYrQz-2FKX0yJA5BSzLPD9ixKgq_?usp=share_link)
genofile <- seqOpen(gds.path)
Annotation_dir <- "annotation/info/FunctionalAnnotation"
Annotation_name_catalog <- get(load("Ablation analysis example data/Annotation_name_catalog.Rdata")) # TODO: change to the correct input path
total_n <- nrow(GWAS_data)
ablation_n <- ceiling(c(0.02, 0.05, 0.1, 0.15, 0.2) * total_n)
ablation_results <- c()
for(num_samps in ablation_n){
set.seed(1)
# Create obj_SS
id.t <- sample(1:total_n, num_samps, replace = FALSE)
covar <- GWAS_data %>% dplyr::select(starts_with("X")) %>% as.matrix()
obj_SS <- list(patient.id=GWAS_data$patient.id, id.t=id.t, y=GWAS_data$Y, s=GWAS_data$S, covar=covar, Z = cbind(1, covar))
# Parameter estimation under the null
theta_est <- ssl_theta(Y = obj_SS$y, X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit) # estimated theta based on Y, X, S, Z, id.t, weights, full_eval, NULL_nlog_like, nit
obj_SS$theta_est <- theta_est$final_est # assigned estimated theta values to all patients
# variance preparation, in real data this part only need to be done once for all genes as long as all elements in obj_SS remain the same
nboot = 5 # change to 500 in real data
para_results <- foreach(i = 1:nboot, .combine = cbind) %dopar% {
simseed <- i
set.seed(simseed)
para_func(nn = total_n, theta = obj_SS$theta_est, Y = obj_SS$y,
X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z, id.t = obj_SS$id.t)
}
# Run plof_SS
plof_result <- plof_SS(chr = 1, gene_name = "BRCA1", genofile = genofile, obj_SS, genes,
QC_label="annotation/info/QC_label", variant_type="SNV", geno_missing_imputation="mean",
Annotation_dir="annotation/info/FunctionalAnnotation", Annotation_name_catalog,
Use_annotation_weights=F, Annotation_name=NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 2, mac.thresh = 10,
boot = T, para_results = para_results)
ablation_results <- rbind(ablation_results, plof_result$results) # add ablation size to the final output
}
ablation_results <- cbind(ablation_n, ablation_results)
ablation_results1 <- ablation_results
write.csv(ablation_results, "Ablation analysis example data/GWAS_Results.csv") # FIXME: create output file
devtools::install_github("yuantianUofT/SSSKAT")
# 2) load libraries
library(gdsfmt)
library(SeqArray)
library(SeqVarTools)
library(STAAR)
library(STAARpipeline)
library(STAARpipelineSummary)
library(dplyr)
library(psych)
library(expm)
library(foreach)
library(doParallel)
library(SKAT)
library(ACAT)
library(SSSKAT)
devtools::install_github("yuantianUofT/SSSKAT")
devtools::install_github("yuantianUofT/SSSKAT")
devtools::install_github("yuantianUofT/SSSKAT")
# 2) load libraries
library(gdsfmt)
library(SeqArray)
library(SeqVarTools)
library(STAAR)
library(STAARpipeline)
library(STAARpipelineSummary)
library(dplyr)
library(psych)
library(expm)
library(foreach)
library(doParallel)
library(SKAT)
library(ACAT)
library(SSSKAT)
# 2) load libraries
library(gdsfmt)
library(SeqArray)
library(SeqVarTools)
library(STAAR)
library(STAARpipeline)
library(STAARpipelineSummary)
library(dplyr)
library(psych)
library(expm)
library(foreach)
library(doParallel)
library(SKAT)
library(ACAT)
library(SSSKAT)
rm(list=ls())
gc()
# 2) load libraries
library(gdsfmt)
library(SeqArray)
library(SeqVarTools)
library(STAAR)
library(STAARpipeline)
library(STAARpipelineSummary)
library(dplyr)
library(psych)
library(expm)
library(foreach)
library(doParallel)
library(SKAT)
library(ACAT)
library(SSSKAT)
# set up parallel computing
ncores = detectCores() #Sys.getenv("SLURM_CPUS_PER_TASK")
registerDoParallel(cores=ncores)# Shows the number of Parallel Workers to be used
print(ncores) # this how many cores are available, and how many you have requested.
getDoParWorkers()#
### load source functions
# TODO: change the following to the correct path
setwd('~/Documents/GitHub/SS-SKAT-Analysis')
source("Ablation analysis script/STAAR_SS.R")
source("Ablation analysis script/SS_test.R")
source("Ablation analysis script/plof_SS.R")
###########################################################
#    Run STAARpipeline
###########################################################
rm(list=ls())
gc()
### load required package
# 1) uncomment the following if any packages used below is not installed
# library(devtools)
# install.packages("BiocManager")
# BiocManager::install("gdsfmt")
# BiocManager::install("SeqArray")
# BiocManager::install("SeqVarTools")
# BiocManager::install("GENESIS")
# install_github("xihaoli/STAAR")
# install_github("xihaoli/MultiSTAAR")
# install_github("zilinli1988/SCANG")
# BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
# install_github("xihaoli/STAARpipeline")
# install_github("xihaoli/STAARpipelineSummary")
# install.packages("psych")
# install.packages("expm")
# install.packages("doParallel")
# install.packages("caret")
# 2) load libraries
library(gdsfmt)
library(SeqArray)
library(SeqVarTools)
library(STAAR)
library(STAARpipeline)
library(STAARpipelineSummary)
library(dplyr)
library(psych)
library(expm)
library(foreach)
library(doParallel)
library(SKAT)
library(ACAT)
library(SSSKAT)
# set up parallel computing
ncores = detectCores() #Sys.getenv("SLURM_CPUS_PER_TASK")
registerDoParallel(cores=ncores)# Shows the number of Parallel Workers to be used
print(ncores) # this how many cores are available, and how many you have requested.
getDoParWorkers()#
### load source functions
# TODO: change the following to the correct path
setwd('~/Documents/GitHub/SS-SKAT-Analysis')
# source("Ablation analysis script/STAAR_SS.R")
# source("Ablation analysis script/SS_test.R")
# source("Ablation analysis script/plof_SS.R")
# source("Ablation analysis script/helper.R")
# source("Ablation analysis script/threshold_test.R")
# source("Ablation analysis script/labeled_test.R")
# source("Ablation analysis script/naive_S_test.R")
# source("Ablation analysis script/threshold.R")
# source("Ablation analysis script/para_func.R")
########################################################
#       Read in full GWAS data
########################################################
set.seed(1)
GWAS_data <- readRDS("Ablation analysis example data/GWAS_data_with_S.rds") # TODO: change to the correct input path
GWAS_data <- as.data.frame(GWAS_data)
gds.path <- "/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds" # TODO: change to the correct input path
set.seed(1)
GWAS_data <- readRDS("Ablation analysis example data/GWAS_data_with_S.rds") # TODO: change to the correct input path
GWAS_data <- as.data.frame(GWAS_data)
# (File above available for download at: https://drive.google.com/drive/folders/19rSIkYrQz-2FKX0yJA5BSzLPD9ixKgq_?usp=share_link)
genofile <- seqOpen(gds.path)
Annotation_dir <- "annotation/info/FunctionalAnnotation"
Annotation_name_catalog <- get(load("Ablation analysis example data/Annotation_name_catalog.Rdata")) # TODO: change to the correct input path
total_n <- nrow(GWAS_data)
ablation_n <- ceiling(c(0.02, 0.05, 0.1, 0.15, 0.2) * total_n)
ablation_results <- c()
for(num_samps in ablation_n){
set.seed(1)
# Create obj_SS
id.t <- sample(1:total_n, num_samps, replace = FALSE)
covar <- GWAS_data %>% dplyr::select(starts_with("X")) %>% as.matrix()
obj_SS <- list(patient.id=GWAS_data$patient.id, id.t=id.t, y=GWAS_data$Y, s=GWAS_data$S, covar=covar, Z = cbind(1, covar))
# Parameter estimation under the null
theta_est <- ssl_theta(Y = obj_SS$y, X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z,
id.t = id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit) # estimated theta based on Y, X, S, Z, id.t, weights, full_eval, NULL_nlog_like, nit
obj_SS$theta_est <- theta_est$final_est # assigned estimated theta values to all patients
# variance preparation, in real data this part only need to be done once for all genes as long as all elements in obj_SS remain the same
nboot = 5 # change to 500 in real data
para_results <- foreach(i = 1:nboot, .combine = cbind) %dopar% {
simseed <- i
set.seed(simseed)
para_func(nn = total_n, theta = obj_SS$theta_est, Y = obj_SS$y,
X = obj_SS$covar, S = obj_SS$s, Z = obj_SS$Z, id.t = obj_SS$id.t)
}
# Run plof_SS
plof_result <- plof_SS(chr = 1, gene_name = "BRCA1", genofile = genofile, obj_SS, genes,
QC_label="annotation/info/QC_label", variant_type="SNV", geno_missing_imputation="mean",
Annotation_dir="annotation/info/FunctionalAnnotation", Annotation_name_catalog,
Use_annotation_weights=F, Annotation_name=NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 2, mac.thresh = 10,
boot = T, para_results = para_results)
ablation_results <- rbind(ablation_results, plof_result$results) # add ablation size to the final output
}
ablation_results <- cbind(ablation_n, ablation_results)
View(ablation_results)
############################################################################################################
# chr19 sMRI
############################################################################################################
# Load the data
file_path <- "/Users/tianyuan/Documents/GitHub/MV_VC_IWAS/RealDataResults/IDP results/IGAP/chr19_dMRI_region_results.csv"
df <- read.csv(file_path)
colnames(df) <- c("IDP_region", "IDP_category", "Freq")
length(unique(df$IDP_region))
# Summarize the number of unique IDP regions by IDP category
summary_data <- df %>%
group_by(IDP_category) %>%
summarise(unique_regions = n_distinct(IDP_region))
print(summary_data)
sum(summary_data$unique_regions)
# check regions shared by different IDP categories
sharedf <- df %>%
group_by(IDP_region) %>%
summarise(unique_categories = n_distinct(IDP_category)) %>%
filter(unique_categories > 1)
############################################################################################################
# chr8 sMRI
############################################################################################################
# Load the data
file_path <- "/Users/tianyuan/Documents/GitHub/MV_VC_IWAS/RealDataResults/IDP results/UKB/chr8_sMRI_region_results.csv"
df <- read.csv(file_path)
colnames(df) <- c("IDP_region", "IDP_category", "Freq")
############################################################################################################
# chr8 dMRI
############################################################################################################
# Load the data
file_path <- "/Users/tianyuan/Documents/GitHub/MV_VC_IWAS/RealDataResults/IDP results/UKB/chr8_dMRI_region_results.csv"
df <- read.csv(file_path)
colnames(df) <- c("IDP_region", "IDP_category", "Freq")
length(unique(df$IDP_region))
# Summarize the number of unique IDP regions by IDP category
summary_data <- df %>%
group_by(IDP_category) %>%
summarise(unique_regions = n_distinct(IDP_region))
print(summary_data)
sum(summary_data$unique_regions)
df %>%
group_by(IDP_region) %>%
summarise(unique_categories = n_distinct(IDP_category)) %>%
filter(unique_categories > 1)
############################################################################################################
# chr19 sMRI
############################################################################################################
# Load the data
file_path <- "/Users/tianyuan/Documents/GitHub/MV_VC_IWAS/RealDataResults/IDP results/IGAP/chr19_dMRI_region_results.csv"
df <- read.csv(file_path)
colnames(df) <- c("IDP_region", "IDP_category", "Freq")
length(unique(df$IDP_region))
# Summarize the number of unique IDP regions by IDP category
summary_data <- df %>%
group_by(IDP_category) %>%
summarise(unique_regions = n_distinct(IDP_region))
print(summary_data)
sum(summary_data$unique_regions)
# check regions shared by different IDP categories
sharedf <- df %>%
group_by(IDP_region) %>%
summarise(unique_categories = n_distinct(IDP_category)) %>%
filter(unique_categories > 1)
sharedf
paste(sharedf$IDP_region, collapse = "; ")
paste(sharedf$IDP_region, collapse = ", ")
dim(sharedr)
dim(sharedf)
setwd("/Users/tianyuan/Documents/GitHub/SSSKAT")
roxygen2::roxygenise()
remove.packages("SSSKAT")
ssl_theta()
ssl_theta
