registerDoParallel(cores=ncores)# Shows the number of Parallel Workers to be used
print(ncores) # this how many cores are available, and how many you have requested.
getDoParWorkers()
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/STAAR_SS.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/SS_test.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/helper.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/gendata.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/helper_datagen.R")
ntotal = 1000
labeled_prop = 0.2
nlabel_value = ntotal*labeled_prop
ROC = 0.8
distri = "Normal"
prev_value = 0.2
type_value = "Power"
testtype = "SKAT"
nsim = 20
dat1 <- gendata(nn = ntotal, prev=prev_value, pve_age=0.1, pve_pcs=0.2, pve_sex = 0.03, prop_causal = 1, snps = 100,
label.size = nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = NULL,
maf_range0 = c(0.001, 0.01), maf_range1 = c(0.001, 0.01),
S_type = "normal", S_para = c(m1 = 1, m0 = 0, s1 = 0.5, s0 = 1))
pROC::roc(dat1$dat$Y, dat1$dat$S)
# compared method
# prev_est <- mean(dat1$dat$Y[dat1$id.t])
Oracle_result <- SSSKAT::labeled_test(dat = dat1$dat,
id.t = 1:nrow(dat1$dat),
weights.beta = NULL)
devtools::install_github("yuantianUofT/SSSKAT")
# library(SSSKAT)
library(MASS)
library(SKAT)
library(ACAT)
library(mvtnorm)
library(Matrix)
library(dplyr)
library(psych)
library(matrixStats)
library(expm)
library(foreach)
library(doParallel)
ncores = 10
registerDoParallel(cores=ncores)# Shows the number of Parallel Workers to be used
print(ncores) # this how many cores are available, and how many you have requested.
getDoParWorkers()
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/STAAR_SS.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/SS_test.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/helper.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/gendata.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/helper_datagen.R")
ntotal = 1000
labeled_prop = 0.2
nlabel_value = ntotal*labeled_prop
ROC = 0.8
distri = "Normal"
prev_value = 0.2
type_value = "Power"
testtype = "SKAT"
nsim = 20
dat1 <- gendata(nn = ntotal, prev=prev_value, pve_age=0.1, pve_pcs=0.2, pve_sex = 0.03, prop_causal = 1, snps = 100,
label.size = nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = NULL,
maf_range0 = c(0.001, 0.01), maf_range1 = c(0.001, 0.01),
S_type = "normal", S_para = c(m1 = 1, m0 = 0, s1 = 0.5, s0 = 1))
pROC::roc(dat1$dat$Y, dat1$dat$S)
# compared method
# prev_est <- mean(dat1$dat$Y[dat1$id.t])
Oracle_result <- SSSKAT::labeled_test(dat = dat1$dat,
id.t = 1:nrow(dat1$dat),
weights.beta = NULL)
dat <- dat1$dat
Y <- dat$Y
X <- dplyr::select(dat, starts_with('X'))
G <- dplyr::select(dat, starts_with('G'))
G <- as.matrix(G)
S <- dat$S
Z <- data.matrix(cbind(1, X))
STAAR_result <- STAAR_SS(genotype=as.matrix(G), phen=Y, surro=S, covar=X, id.t=dat1$id.t, annotation_phred = NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 0, mac.thresh = 10,
boot = T, nboot = 5000)
library(STAAR)
STAAR_result <- STAAR_SS(genotype=as.matrix(G), phen=Y, surro=S, covar=X, id.t=dat1$id.t, annotation_phred = NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 0, mac.thresh = 10,
boot = T, nboot = 5000)
STAAR_result$results_SS_1_1$pvalue
result2 = foreach(sim=1:nsim, .combine='rbind', .packages = c("mvtnorm", "SKAT", "dplyr", "MASS", "matrixStats", "expm"), .errorhandling = c("remove"))%dopar%{
dat1 <- gendata(nn = ntotal, prev=prev_value, pve_age=0.1, pve_pcs=0.2, pve_sex = 0.03, prop_causal = 1, snps = 100,
label.size = nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = NULL,
maf_range0 = c(0.001, 0.01), maf_range1 = c(0.001, 0.01),
S_type = "normal", S_para = c(m1 = 1, m0 = 0, s1 = 0.5, s0 = 1))
pROC::roc(dat1$dat$Y, dat1$dat$S)
# compared method
# prev_est <- mean(dat1$dat$Y[dat1$id.t])
Oracle_result <- SSSKAT::labeled_test(dat = dat1$dat,
id.t = 1:nrow(dat1$dat),
weights.beta = NULL)
# Labeled_result <- SSSKAT::labeled_test(dat = dat1$dat,
#                                id.t = dat1$id.t,
#                                weights.beta = NULL)
# naive_result <- SSSKAT::naive_test(dat = dat1$dat,
#                                  weights.beta = NULL)
# Y_threshold <- SSSKAT::get_Y_threshold(dat = dat1$dat, prev_value = prev_est)
# threshold_results <- SSSKAT::threshold_test(dat = dat1$dat,
#                                             id.t = dat1$id.t,
#                                             thre_value = Y_threshold,
#                                             weights.beta = NULL)
# SS
# data preparation
dat <- dat1$dat
Y <- dat$Y
X <- dplyr::select(dat, starts_with('X'))
G <- dplyr::select(dat, starts_with('G'))
G <- as.matrix(G)
S <- dat$S
Z <- data.matrix(cbind(1, X))
STAAR_result <- STAAR_SS(genotype=as.matrix(G), phen=Y, surro=S, covar=X, id.t=dat1$id.t, annotation_phred = NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 0, mac.thresh = 10,
boot = T, nboot = 5000)
# SKAT_pvalues <- c(Oracle = Oracle_result$SKAT_p, Labeled = Labeled_result$SKAT_p,
#                   naive = naive_result$SKAT_p, thresholded = threshold_results$SKAT_p,
#                   SS = SS_results$pvalue[1])
# SKAT_pvalues <- c(Oracle = Oracle_result$SKAT_p,
#                   naive = naive_result$SKAT_p,
#                   SS = SS_results$pvalue[1])
# Burden_pvalues <- c(Oracle = Oracle_result$Burden_p, Labeled = Labeled_result$Burden_p,
#                   naive = naive_result$Burden_p, thresholded = threshold_results$Burden_p,
#                   SS = SS_results$pvalue[2])
# ACAT_pvalues <- c(Oracle = Oracle_result$ACAT_p, Labeled = Labeled_result$ACAT_p,
#                     naive = naive_result$ACAT_p, thresholded = threshold_results$ACAT_p,
#                     SS = SS_results$pvalue[3])
c(unlist(Oracle_result), STAAR_result$results_SS_1_1$pvalue, STAAR_result$results_SS_1_25$pvalue)
# list(SKAT_pvalues = SKAT_pvalues, Burden_pvalues = Burden_pvalues, ACAT_pvalues = ACAT_pvalues)
}
# library(SSSKAT)
library(MASS)
library(SKAT)
library(ACAT)
library(mvtnorm)
library(Matrix)
library(dplyr)
library(psych)
library(matrixStats)
library(expm)
library(foreach)
library(doParallel)
library(STAAR)
ncores = 10
registerDoParallel(cores=ncores)# Shows the number of Parallel Workers to be used
print(ncores) # this how many cores are available, and how many you have requested.
getDoParWorkers()
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/STAAR_SS.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/SS_test.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/helper.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/gendata.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/helper_datagen.R")
ntotal = 1000
labeled_prop = 0.2
nlabel_value = ntotal*labeled_prop
ROC = 0.8
distri = "Normal"
prev_value = 0.2
type_value = "T1E"
testtype = "SKAT"
nsim = 50
result = foreach(sim=1:nsim, .combine='rbind', .packages = c("mvtnorm", "SKAT", "dplyr", "MASS", "matrixStats", "expm"), .errorhandling = c("remove"))%dopar%{
dat1 <- gendata(nn = ntotal, prev=prev_value, pve_age=0.1, pve_pcs=0.2, pve_sex = 0.03, prop_causal = 1, snps = 100,
label.size = nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = NULL,
maf_range0 = c(0.001, 0.01), maf_range1 = c(0.001, 0.01),
S_type = "normal", S_para = c(m1 = 1, m0 = 0, s1 = 0.5, s0 = 1))
pROC::roc(dat1$dat$Y, dat1$dat$S)
# compared method
# prev_est <- mean(dat1$dat$Y[dat1$id.t])
Oracle_result <- SSSKAT::labeled_test(dat = dat1$dat,
id.t = 1:nrow(dat1$dat),
weights.beta = NULL)
# Labeled_result <- SSSKAT::labeled_test(dat = dat1$dat,
#                                id.t = dat1$id.t,
#                                weights.beta = NULL)
# naive_result <- SSSKAT::naive_test(dat = dat1$dat,
#                                  weights.beta = NULL)
# Y_threshold <- SSSKAT::get_Y_threshold(dat = dat1$dat, prev_value = prev_est)
# threshold_results <- SSSKAT::threshold_test(dat = dat1$dat,
#                                             id.t = dat1$id.t,
#                                             thre_value = Y_threshold,
#                                             weights.beta = NULL)
# SS
# data preparation
dat <- dat1$dat
Y <- dat$Y
X <- dplyr::select(dat, starts_with('X'))
G <- dplyr::select(dat, starts_with('G'))
G <- as.matrix(G)
S <- dat$S
Z <- data.matrix(cbind(1, X))
STAAR_result <- STAAR_SS(genotype=as.matrix(G), phen=Y, surro=S, covar=X, id.t=dat1$id.t, annotation_phred = NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 0, mac.thresh = 10,
boot = T, nboot = 5000)
# SKAT_pvalues <- c(Oracle = Oracle_result$SKAT_p, Labeled = Labeled_result$SKAT_p,
#                   naive = naive_result$SKAT_p, thresholded = threshold_results$SKAT_p,
#                   SS = SS_results$pvalue[1])
# SKAT_pvalues <- c(Oracle = Oracle_result$SKAT_p,
#                   naive = naive_result$SKAT_p,
#                   SS = SS_results$pvalue[1])
# Burden_pvalues <- c(Oracle = Oracle_result$Burden_p, Labeled = Labeled_result$Burden_p,
#                   naive = naive_result$Burden_p, thresholded = threshold_results$Burden_p,
#                   SS = SS_results$pvalue[2])
# ACAT_pvalues <- c(Oracle = Oracle_result$ACAT_p, Labeled = Labeled_result$ACAT_p,
#                     naive = naive_result$ACAT_p, thresholded = threshold_results$ACAT_p,
#                     SS = SS_results$pvalue[3])
c(unlist(Oracle_result), STAAR_result$results_SS_1_1$pvalue, STAAR_result$results_SS_1_25$pvalue)
# list(SKAT_pvalues = SKAT_pvalues, Burden_pvalues = Burden_pvalues, ACAT_pvalues = ACAT_pvalues)
}
hist(result[, 1])
length(which(result[, 1] < 0.05))
5/50
plot(result[, 1], result[, 4])
result[, 4]
hist(result[, 4])
length(which(result[, 4] < 0.05))
result2 = foreach(sim=1:nsim, .combine='rbind', .packages = c("mvtnorm", "SKAT", "dplyr", "MASS", "matrixStats", "expm"), .errorhandling = c("remove"))%dopar%{
dat1 <- gendata(nn = ntotal, prev=prev_value, pve_age=0.1, pve_pcs=0.2, pve_sex = 0.03, prop_causal = 1, snps = 100,
label.size = nlabel_value, type = type_value,
x_mean0 = c(0, 0.1, 0, 0, 0), x_mean1 = NULL, x_cov = NULL,
maf_range0 = c(0.001, 0.01), maf_range1 = c(0.001, 0.01),
S_type = "normal", S_para = c(m1 = 1, m0 = 0, s1 = 0.5, s0 = 1))
pROC::roc(dat1$dat$Y, dat1$dat$S)
# compared method
# prev_est <- mean(dat1$dat$Y[dat1$id.t])
Oracle_result <- SSSKAT::labeled_test(dat = dat1$dat,
id.t = 1:nrow(dat1$dat),
weights.beta = NULL)
# Labeled_result <- SSSKAT::labeled_test(dat = dat1$dat,
#                                id.t = dat1$id.t,
#                                weights.beta = NULL)
# naive_result <- SSSKAT::naive_test(dat = dat1$dat,
#                                  weights.beta = NULL)
# Y_threshold <- SSSKAT::get_Y_threshold(dat = dat1$dat, prev_value = prev_est)
# threshold_results <- SSSKAT::threshold_test(dat = dat1$dat,
#                                             id.t = dat1$id.t,
#                                             thre_value = Y_threshold,
#                                             weights.beta = NULL)
# SS
# data preparation
dat <- dat1$dat
Y <- dat$Y
X <- dplyr::select(dat, starts_with('X'))
G <- dplyr::select(dat, starts_with('G'))
G <- as.matrix(G)
S <- dat$S
Z <- data.matrix(cbind(1, X))
STAAR_result <- STAAR_SS(genotype=as.matrix(G), phen=Y, surro=S, covar=X, id.t=dat1$id.t, annotation_phred = NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 0, mac.thresh = 10,
boot = T, nboot = 5000)
# SKAT_pvalues <- c(Oracle = Oracle_result$SKAT_p, Labeled = Labeled_result$SKAT_p,
#                   naive = naive_result$SKAT_p, thresholded = threshold_results$SKAT_p,
#                   SS = SS_results$pvalue[1])
# SKAT_pvalues <- c(Oracle = Oracle_result$SKAT_p,
#                   naive = naive_result$SKAT_p,
#                   SS = SS_results$pvalue[1])
# Burden_pvalues <- c(Oracle = Oracle_result$Burden_p, Labeled = Labeled_result$Burden_p,
#                   naive = naive_result$Burden_p, thresholded = threshold_results$Burden_p,
#                   SS = SS_results$pvalue[2])
# ACAT_pvalues <- c(Oracle = Oracle_result$ACAT_p, Labeled = Labeled_result$ACAT_p,
#                     naive = naive_result$ACAT_p, thresholded = threshold_results$ACAT_p,
#                     SS = SS_results$pvalue[3])
c(unlist(Oracle_result), STAAR_result$results_SS_1_1$pvalue, STAAR_result$results_SS_1_25$pvalue)
# list(SKAT_pvalues = SKAT_pvalues, Burden_pvalues = Burden_pvalues, ACAT_pvalues = ACAT_pvalues)
}
###########################################################
#    Run STAARpipeline
#    Date: 20231105
###########################################################
rm(list=ls())
gc()
### load required package
library(gdsfmt)
library(SeqArray)
library(SeqVarTools)
library(STAAR)
library(STAARpipeline)
library(STAARpipelineSummary)
### load source functions
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/STAAR_SS.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/SS_test.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/helper.R")
y <- get(load("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/phenotype_LDLR_plof_ds_APOE_enhancer_DHS.Rdata"))
s <- get(load("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/surrogate_LDLR_plof_ds_APOE_enhancer_DHS.Rdata"))
id.t <- get(load("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/labeledid.Rdata"))
covar <- get(load("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/covar.Rdata"))
Geno_LDLR <- get(load("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/genotype_LDLR.Rdata"))
Geno_APOE <- get(load("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/genotype_APOE.Rdata"))
start_time <- proc.time()
start_time
end_time <- proc.time()
end_time - start_time
start_time <- proc.time()
end_time <- proc.time()
end_time
end_time - start_time
start_time <- proc.time()
STAAR_result_LDLR <- STAAR_SS(genotype=as.matrix(Geno_LDLR), phen=y, surro=s, covar=covar, id.t=id.t, annotation_phred = NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 0, mac.thresh = 10,
boot = T, nboot = 10000)
end_time <- proc.time()
end_time - start_time
463.626/60
# generate phenotype and surrogate
p <- SSSKAT::g.logit(alpha0 + alpha1 * sex + LDLR_Effect + APOE_Effect)
y <- sapply(1:length(p), function(index) rbinom(1, 1, p[index]))
s <- S_normal(nn = length(y), y, m1, m0, s1, s0) # ROC 0.8 of s on y
########################################################
#       Simulated Binary Phenotype and continuous surrogate
########################################################
S_normal <- function(nn, y, m1, m0, s1, s0) {
s = rep(NA, nn)
s[y == 1] <- rnorm(n = sum(y), mean = m1, sd = s1)
s[y == 0] <- rnorm(n = sum(1-y), mean = m0, sd = s0)
return(s)
}
alpha0 <- 0
alpha1 <- 0.5
m1=1; m0=0; s1=1; s0=0.5
set.seed(666)
# Generate two covariates
N <- length(phenotype.id)
## phenotype.id
pheno_cov <- read.table("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/integrated_call_samples_v3.20130502.ALL.panel",header=TRUE)
phenotype.id <- as.vector(pheno_cov$sample)
########################################################
#       Simulated Binary Phenotype and continuous surrogate
########################################################
S_normal <- function(nn, y, m1, m0, s1, s0) {
s = rep(NA, nn)
s[y == 1] <- rnorm(n = sum(y), mean = m1, sd = s1)
s[y == 0] <- rnorm(n = sum(1-y), mean = m0, sd = s0)
return(s)
}
alpha0 <- 0
alpha1 <- 0.5
m1=1; m0=0; s1=1; s0=0.5
set.seed(666)
# Generate two covariates
N <- length(phenotype.id)
sex <- pheno_cov$gender=="female"
PCs <- read.table("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/output.sparseGRM.score",header=FALSE)
colnames(PCs)[2:12] <- c("id","PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8","PC9","PC10")
# generate phenotype and surrogate
p <- SSSKAT::g.logit(alpha0 + alpha1 * sex + LDLR_Effect + APOE_Effect)
# generate phenotype and surrogate
p <- SSSKAT::g.logit(alpha0 + alpha1 * sex)
y <- sapply(1:length(p), function(index) rbinom(1, 1, p[index]))
s <- S_normal(nn = length(y), y, m1, m0, s1, s0) # ROC 0.8 of s on y
roc(y, s)
pheno <- cbind(pheno_cov, y, s)
pheno <- dplyr::left_join(pheno,PCs[,2:12],by=c("sample"="id"))
pROC::roc(y, s)
pheno <- cbind(pheno_cov, y, s)
pheno <- dplyr::left_join(pheno,PCs[,2:12],by=c("sample"="id"))
covar <- pheno[, c("PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8","PC9","PC10")]
covar <- cbind(sex, covar)
covar$sex <- as.numeric(covar$sex)
###########################################################
#    Run STAARpipeline
#    Date: 20231105
###########################################################
rm(list=ls())
gc()
### load required package
library(gdsfmt)
library(SeqArray)
library(SeqVarTools)
library(STAAR)
library(STAARpipeline)
library(STAARpipelineSummary)
### load source functions
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/STAAR_SS.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/SS_test.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/helper.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/plof_SS.R")
## phenotype.id
pheno_cov <- read.table("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/integrated_call_samples_v3.20130502.ALL.panel",header=TRUE)
phenotype.id <- as.vector(pheno_cov$sample)
########################################################
#       Simulated Binary Phenotype and continuous surrogate
########################################################
S_normal <- function(nn, y, m1, m0, s1, s0) {
s = rep(NA, nn)
s[y == 1] <- rnorm(n = sum(y), mean = m1, sd = s1)
s[y == 0] <- rnorm(n = sum(1-y), mean = m0, sd = s0)
return(s)
}
alpha0 <- 0
alpha1 <- 0.5
m1=1; m0=0; s1=1; s0=0.5
set.seed(666)
# Generate two covariates
N <- length(phenotype.id)
sex <- pheno_cov$gender=="female"
PCs <- read.table("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/output.sparseGRM.score",header=FALSE)
colnames(PCs)[2:12] <- c("id","PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8","PC9","PC10")
# generate phenotype and surrogate
p <- SSSKAT::g.logit(alpha0 + alpha1 * sex)
y <- sapply(1:length(p), function(index) rbinom(1, 1, p[index]))
s <- S_normal(nn = length(y), y, m1, m0, s1, s0) # ROC 0.8 of s on y
pROC::roc(y, s)
pheno <- cbind(pheno_cov, y, s)
pheno <- dplyr::left_join(pheno,PCs[,2:12],by=c("sample"="id"))
covar <- pheno[, c("PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8","PC9","PC10")]
covar <- cbind(sex, covar)
covar$sex <- as.numeric(covar$sex)
# labeled data
id.t <- sample(1:length(s), 200)
obj_SS <- list(phenotype.id=phenotype.id, id.t=id.t, y=y, s=s, covar=covar)
dat_null <- cbind(y, covar, s)
colnames(dat_null) <- c("Y", paste0("X", 1:ncol(covar)), "S")
theta_est <- ssl_theta(dat = dat_null, id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit)
obj_SS$theta_est <- theta_est
obj_SS
obj_SS$theta_est <- theta_est$final_est
obj_SS
gds.path <- "/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds"
genofile <- seqOpen(gds.path)
gds.path <- "/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds"
genofile <- seqOpen(gds.path)
Annotation_dir <- "annotation/info/FunctionalAnnotation"
Annotation_name_catalog <- get(load("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/Annotation_name_catalog.Rdata"))
plof_result <- plof_SS(chr = 1, gene_name = "BRCA1", genofile = genofile, obj_SS, genes,
QC_label="annotation/info/QC_label", variant_type="SNV", geno_missing_imputation="mean",
Annotation_dir="annotation/info/FunctionalAnnotation", Annotation_name_catalog,
Use_annotation_weights=F, Annotation_name=NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 2, mac.thresh = 10,
boot = T, nboot = 10000)
View(plof_result)
plof_result <- plof_SS(chr = 1, gene_name = "BRCA1", genofile = genofile, obj_SS, genes,
QC_label="annotation/info/QC_label", variant_type="SNV", geno_missing_imputation="mean",
Annotation_dir="annotation/info/FunctionalAnnotation", Annotation_name_catalog,
Use_annotation_weights=F, Annotation_name=NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 2, mac.thresh = 20,
boot = T, nboot = 10000)
View(plof_result)
rm(list=ls())
gc()
### load required package
library(gdsfmt)
library(SeqArray)
library(SeqVarTools)
library(STAAR)
library(STAARpipeline)
library(STAARpipelineSummary)
### load source functions
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/STAAR_SS.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/SS_test.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/helper.R")
source("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/plof_SS.R")
## phenotype.id
pheno_cov <- read.table("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/integrated_call_samples_v3.20130502.ALL.panel",header=TRUE)
phenotype.id <- as.vector(pheno_cov$sample)
S_normal <- function(nn, y, m1, m0, s1, s0) {
s = rep(NA, nn)
s[y == 1] <- rnorm(n = sum(y), mean = m1, sd = s1)
s[y == 0] <- rnorm(n = sum(1-y), mean = m0, sd = s0)
return(s)
}
alpha0 <- 0
alpha1 <- 0.5
m1=1; m0=0; s1=1; s0=0.5
set.seed(666)
# Generate two covariates
N <- length(phenotype.id)
sex <- pheno_cov$gender=="female"
PCs <- read.table("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/output.sparseGRM.score",header=FALSE)
colnames(PCs)[2:12] <- c("id","PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8","PC9","PC10")
# generate phenotype and surrogate
p <- SSSKAT::g.logit(alpha0 + alpha1 * sex)
y <- sapply(1:length(p), function(index) rbinom(1, 1, p[index]))
s <- S_normal(nn = length(y), y, m1, m0, s1, s0) # ROC 0.8 of s on y
pROC::roc(y, s)
pheno <- cbind(pheno_cov, y, s)
pheno <- dplyr::left_join(pheno,PCs[,2:12],by=c("sample"="id"))
covar <- pheno[, c("PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8","PC9","PC10")]
covar <- cbind(sex, covar)
covar$sex <- as.numeric(covar$sex)
# labeled data
id.t <- sample(1:length(s), 200)
obj_SS <- list(phenotype.id=phenotype.id, id.t=id.t, y=y, s=s, covar=covar)
dat_null <- cbind(y, covar, s)
colnames(dat_null) <- c("Y", paste0("X", 1:ncol(covar)), "S")
theta_est <- ssl_theta(dat = dat_null, id.t, weights = NULL, full_eval = TRUE, NULL_nlog_like, nit)
obj_SS$theta_est <- theta_est$final_est
gds.path <- "/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/1kGP_high_coverage_Illumina.chr1.filtered.SNV_INDEL_SV_phased_panel.gds"
genofile <- seqOpen(gds.path)
Annotation_dir <- "annotation/info/FunctionalAnnotation"
Annotation_name_catalog <- get(load("/Users/tianyuan/Desktop/UoT/SKAT 2023/Xihao/Annotation_name_catalog.Rdata"))
plof_result <- plof_SS(chr = 1, gene_name = "BRCA1", genofile = genofile, obj_SS, genes,
QC_label="annotation/info/QC_label", variant_type="SNV", geno_missing_imputation="mean",
Annotation_dir="annotation/info/FunctionalAnnotation", Annotation_name_catalog,
Use_annotation_weights=F, Annotation_name=NULL,
rare_maf_cutoff = 0.01, rv_num_cutoff = 2, mac.thresh = 10,
boot = T, nboot = 10)
plof_result
# supervised likelihood
logl_null=expression(y*log((1 / (1 + exp(-(a1))))) + (1-y)*log(1-(1 / (1 + exp(-(a1))))))
# first derivative
logl_null_a1 <- D(logl_null,'a1')
logl_null_a1
library(SSSKAT)
devtools::install_github("yuantianUofT/SSSKAT")
setwd("/Users/tianyuan/Documents/GitHub/SSSKAT")
roxygen2::roxygenise()
remove.packages("SSSKAT")
